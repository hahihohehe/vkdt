#version 460
#extension GL_GOOGLE_include_directive    : enable
#extension GL_EXT_nonuniform_qualifier    : enable

#include "shared.glsl"

layout(local_size_x = DT_LOCAL_SIZE_X, local_size_y = DT_LOCAL_SIZE_Y, local_size_z = 1) in;

layout( // input buffer xy
set = 1, binding = 0
) uniform sampler2D mv_in;

layout( // output motion variation y
set = 1, binding = 1
) uniform writeonly image2D mot_out;

float diff(vec3 a, vec3 b)
{
  return abs(a.x - b.x) + abs(a.y - b.y) + abs(a.z - b.z);
}

void
main()
{
  ivec2 ipos = ivec2(gl_GlobalInvocationID);
  if(any(greaterThanEqual(ipos, imageSize(mot_out)))) return;

  vec2 M = texelFetch(mv_in, 2 * ipos, 0).xy;
  vec2 m = M;
  for (int i = -1; i <= 1; i++)
  {
    for (int j = -1; j <= 1; j++)
    {
      vec2 v = texelFetch(mv_in, 2 * (ipos + ivec2(i, j)), 0).xy;
      m = min(m, v);
      M = max(M, v);
    }
  }

  float mov = clamp(.3 * length(M - m), 0, 1);


  imageStore(mot_out, ipos, vec4(mov, mov, mov, 1));
}
