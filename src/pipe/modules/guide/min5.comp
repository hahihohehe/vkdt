#version 460
#extension GL_GOOGLE_include_directive    : enable
#extension GL_EXT_nonuniform_qualifier    : enable

#include "shared.glsl"

layout(local_size_x = DT_LOCAL_SIZE_X, local_size_y = DT_LOCAL_SIZE_Y, local_size_z = 1) in;

layout( // input mask y
set = 1, binding = 0
) uniform sampler2D mask_in;

layout( // output mask y
set = 1, binding = 1
) uniform writeonly image2D mask_out;

#define RAD 2

void
main()
{
  ivec2 ipos = ivec2(gl_GlobalInvocationID);
  if(any(greaterThanEqual(ipos, imageSize(mask_out)))) return;

  float m = texelFetch(mask_in, ipos, 0).x;
  for (int i = -RAD; i <= RAD; i++)
  {
    for (int j = -RAD; j <= RAD; j++)
    {
      float c = texelFetch(mask_in, ipos + ivec2(i, j), 0).x;
      m = min(m, c);
    }
  }

  imageStore(mask_out, ipos, vec4(m, m, m, 1));
}
