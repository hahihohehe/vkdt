#version 460
#extension GL_GOOGLE_include_directive    : enable
#extension GL_EXT_nonuniform_qualifier    : enable

#include "shared.glsl"

layout(local_size_x = DT_LOCAL_SIZE_X, local_size_y = DT_LOCAL_SIZE_Y, local_size_z = 1) in;

// global uniform stuff about image and roi
layout(std140, set = 0, binding = 1) uniform params_t
{
  int down;
} params;

layout(push_constant, std140) uniform push_t
{
  int block;
} push;

layout( // input f16 buffer rgb
    set = 1, binding = 0
) uniform sampler2D img_in;

layout( // output f16 buffer rgb
    set = 1, binding = 1
) uniform writeonly image2D img_out;

void
main()
{
  ivec2 ipos = ivec2(gl_GlobalInvocationID);
  if(any(greaterThanEqual(ipos, imageSize(img_out)))) return;

  vec3 col = vec3(0, 0, 0);
  ivec2 block_pos = (ipos / push.block) * push.block;
  ivec2 off = ipos - block_pos;
  for (int i = 0; i < params.down; i++)
  {
    for (int j = 0; j < params.down; j++)
    {
      ivec2 spos = params.down * block_pos + ivec2(i, j) * push.block + off;
      col += texelFetch(img_in, spos, 0).rgb;
    }
  }
  col /= params.down * params.down;
  imageStore(img_out, ipos, vec4(col, 1));

}

