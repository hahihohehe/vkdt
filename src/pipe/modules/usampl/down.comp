#version 460
#extension GL_GOOGLE_include_directive    : enable
#extension GL_EXT_nonuniform_qualifier    : enable

#include "shared.glsl"

layout(local_size_x = DT_LOCAL_SIZE_X, local_size_y = DT_LOCAL_SIZE_Y, local_size_z = 1) in;

// global uniform stuff about image and roi
layout(std140, set = 0, binding = 1) uniform params_t
{
  int down;
  int image;
} params;

layout( // input buffer rgba
set = 1, binding = 0
) uniform sampler2D img_in;

layout( // output rgba
set = 1, binding = 1
) uniform writeonly image2D img_out;

layout( // output motion vectors
set = 1, binding = 2
) uniform writeonly image2D img_off;

void
eval_gauss(
vec4 cov, vec2 off,
out float weight)
{
  dvec2 eval = clamp(cov.xy, 0.01, 25); // the lower bound has direct impact on sharpness
  dmat2 E = dmat2(cov.z, -cov.w,
  cov.w,  cov.z);
  dvec2 of = E * off;
  weight = clamp(exp(float(-0.5*dot(of/eval, of))), 1e-4, 1);
}

void
main()
{
  ivec2 ipos = ivec2(gl_GlobalInvocationID);
  if(any(greaterThanEqual(ipos, imageSize(img_out)))) return;

  ivec2 sposbase = params.down * ipos;
  ivec2 off = ivec2(0, params.image / params.down);
  off.x = params.image - (off.y * params.down);
  sposbase += off;

  // add an extra shift offset to test superres module
  ivec2 aoff = ivec2(0, 0);
  if (params.image != 0)
  {
    int x = 73 * params.image / 20;
    int y = 13 * params.image / 20;
    aoff = ivec2(73 * params.image - 20 * x - 10, 10 + 20 * y - 13 * params.image);
    sposbase += aoff * params.down;
  }

  vec3 col = vec3(0, 0, 0);
  float wsum = 0;
  for (int i = 0; i < params.down; i++)
  {
    for (int j = 0; j < params.down; j++)
    {
      float weight;
      eval_gauss(vec4(.3, .3, 1, 0), vec2(i - .5 * (params.down - 1), j - .5 * (params.down - 1)), weight);
      wsum += weight;
      col += weight * texelFetch(img_in, sposbase + ivec2(i, j), 0).rgb;
    }
  }

  //col /= (params.down * params.down);
  col /= wsum;

  imageStore(img_out, ipos, vec4(col, 1));
  // imageStore(img_out, ipos, texelFetch(img_in, ipos, 0));

  vec2 mv = (vec2(off) / params.down) + aoff;
  imageStore(img_off, ipos, vec4(mv, mv));
}
