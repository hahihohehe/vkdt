#version 460
#extension GL_GOOGLE_include_directive    : enable
#extension GL_EXT_nonuniform_qualifier    : enable

#include "shared.glsl"

layout(local_size_x = DT_LOCAL_SIZE_X, local_size_y = DT_LOCAL_SIZE_Y, local_size_z = 1) in;

layout(std140, set = 0, binding = 0) uniform global_t
{
  uint frame;
} global;

layout(push_constant, std140) uniform push_t
{
  int it;    // level, 0 is finest
} push;

layout( // input buffer grey scale
    set = 1, binding = 0
) uniform sampler2D img_in0;

layout( // input buffer grey scale
    set = 1, binding = 1
) uniform sampler2D img_in1;

layout( // input buffer rgb coarse offset (dx dy dist)
    set = 1, binding = 2
) uniform sampler2D img_off;

layout( // output buffer new (finer offset vectors)
    set = 1, binding = 3
) uniform writeonly image2D img_out;

// write to offset image the abs distance between the two images,
// where i1 is shifted by an offset (as in push constants) plus
// the offset of any previous coarse buffers.
// note that we're doing it wrong, and evaluating patches on top
// of coarsely warped images (they aren't square any more).
void
main()
{
  ivec2 ipos = ivec2(gl_GlobalInvocationID.xy);
  if(any(greaterThanEqual(ipos, imageSize(img_out)))) return;

  int last_upscale = push.it == 0 ? 2 : 4;
  int tile_size = push.it < 3 ? 16 : 8;
  int win_size = push.it == 0 ? 1 : 4;

  ivec2 tile_start = tile_size * ipos;

  float min_dist = 1000000;   // should be high enough
  vec2 best_off = vec2(0, 0);
  for (int i = -win_size; i <= win_size; i++)
  {
    for (int j = -win_size; j <= win_size; j++)
    {
      float i0 = texelFetch(img_in0, tile_start + ivec2(i, j), 0).r;
      float i1;
      float dist = 0;
      vec2 off = vec2(0, 0);
      if (push.it < 3)
      {
        off = vec2(i, j) + texture(img_off, (ipos/last_upscale +.5)/textureSize(img_off, 0)).rg * last_upscale;
      }
      for (int x = 0; x < tile_size; x++)
      {
        for (int y = 0; y < tile_size; y++)
        {
          i1 = texelFetch(img_in1, tile_start + ivec2(x, y) + ivec2(off), 0).r;

          // calculate distance
          dist = abs(i0 - i1);  // L1
        }
      }

      if (dist < min_dist)
      {
        min_dist = dist;
        best_off = off;
      }
    }
  }

  imageStore(img_out, ipos, vec4(best_off, best_off));
}

